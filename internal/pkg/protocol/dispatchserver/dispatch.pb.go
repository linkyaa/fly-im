// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/pkg/protocol/dispatchserver/dispatch.proto

package dispatchserver

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v1 "github.com/linkyaa/fly-im-api/proto/im/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 消息分发请求
type DispatchReq struct {
	SenderDevice v1.DeviceType  `protobuf:"varint,1,opt,name=senderDevice,proto3,enum=DeviceType" json:"senderDevice,omitempty"`
	ChannelType  v1.ChannelType `protobuf:"varint,2,opt,name=channelType,proto3,enum=ChannelType" json:"channelType,omitempty"`
	SenderId     int64          `protobuf:"varint,3,opt,name=senderId,proto3" json:"senderId,omitempty"`
	ChannelId    int64          `protobuf:"varint,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Message      []byte         `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *DispatchReq) Reset()         { *m = DispatchReq{} }
func (m *DispatchReq) String() string { return proto.CompactTextString(m) }
func (*DispatchReq) ProtoMessage()    {}
func (*DispatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_304e641430821a39, []int{0}
}
func (m *DispatchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatchReq.Merge(m, src)
}
func (m *DispatchReq) XXX_Size() int {
	return m.Size()
}
func (m *DispatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_DispatchReq proto.InternalMessageInfo

func (m *DispatchReq) GetSenderDevice() v1.DeviceType {
	if m != nil {
		return m.SenderDevice
	}
	return v1.DeviceType_app
}

func (m *DispatchReq) GetChannelType() v1.ChannelType {
	if m != nil {
		return m.ChannelType
	}
	return v1.ChannelType_personal
}

func (m *DispatchReq) GetSenderId() int64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *DispatchReq) GetChannelId() int64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *DispatchReq) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

// 消息分发响应
type DispatchResp struct {
	Code v1.ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=ResponseCode" json:"code,omitempty"`
}

func (m *DispatchResp) Reset()         { *m = DispatchResp{} }
func (m *DispatchResp) String() string { return proto.CompactTextString(m) }
func (*DispatchResp) ProtoMessage()    {}
func (*DispatchResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_304e641430821a39, []int{1}
}
func (m *DispatchResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DispatchResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DispatchResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DispatchResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispatchResp.Merge(m, src)
}
func (m *DispatchResp) XXX_Size() int {
	return m.Size()
}
func (m *DispatchResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DispatchResp.DiscardUnknown(m)
}

var xxx_messageInfo_DispatchResp proto.InternalMessageInfo

func (m *DispatchResp) GetCode() v1.ResponseCode {
	if m != nil {
		return m.Code
	}
	return v1.ResponseCode_ok
}

// 批量分发消息
type BatchDispatchReq struct {
	// 消息长度列表
	MsgsLen []int64 `protobuf:"varint,1,rep,packed,name=msgsLen,proto3" json:"msgsLen,omitempty"`
	// 多个消息组合的列表
	Msgs []byte `protobuf:"bytes,2,opt,name=msgs,proto3" json:"msgs,omitempty"`
}

func (m *BatchDispatchReq) Reset()         { *m = BatchDispatchReq{} }
func (m *BatchDispatchReq) String() string { return proto.CompactTextString(m) }
func (*BatchDispatchReq) ProtoMessage()    {}
func (*BatchDispatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_304e641430821a39, []int{2}
}
func (m *BatchDispatchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchDispatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchDispatchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchDispatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDispatchReq.Merge(m, src)
}
func (m *BatchDispatchReq) XXX_Size() int {
	return m.Size()
}
func (m *BatchDispatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDispatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDispatchReq proto.InternalMessageInfo

func (m *BatchDispatchReq) GetMsgsLen() []int64 {
	if m != nil {
		return m.MsgsLen
	}
	return nil
}

func (m *BatchDispatchReq) GetMsgs() []byte {
	if m != nil {
		return m.Msgs
	}
	return nil
}

// 批量分发消息响应
type BatchDispatchResp struct {
	UserIds []int64           `protobuf:"varint,1,rep,packed,name=userIds,proto3" json:"userIds,omitempty"`
	Codes   []v1.ResponseCode `protobuf:"varint,2,rep,packed,name=codes,proto3,enum=ResponseCode" json:"codes,omitempty"`
}

func (m *BatchDispatchResp) Reset()         { *m = BatchDispatchResp{} }
func (m *BatchDispatchResp) String() string { return proto.CompactTextString(m) }
func (*BatchDispatchResp) ProtoMessage()    {}
func (*BatchDispatchResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_304e641430821a39, []int{3}
}
func (m *BatchDispatchResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchDispatchResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchDispatchResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchDispatchResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchDispatchResp.Merge(m, src)
}
func (m *BatchDispatchResp) XXX_Size() int {
	return m.Size()
}
func (m *BatchDispatchResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchDispatchResp.DiscardUnknown(m)
}

var xxx_messageInfo_BatchDispatchResp proto.InternalMessageInfo

func (m *BatchDispatchResp) GetUserIds() []int64 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *BatchDispatchResp) GetCodes() []v1.ResponseCode {
	if m != nil {
		return m.Codes
	}
	return nil
}

func init() {
	proto.RegisterType((*DispatchReq)(nil), "DispatchReq")
	proto.RegisterType((*DispatchResp)(nil), "DispatchResp")
	proto.RegisterType((*BatchDispatchReq)(nil), "BatchDispatchReq")
	proto.RegisterType((*BatchDispatchResp)(nil), "BatchDispatchResp")
}

func init() {
	proto.RegisterFile("internal/pkg/protocol/dispatchserver/dispatch.proto", fileDescriptor_304e641430821a39)
}

var fileDescriptor_304e641430821a39 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xb1, 0x6e, 0xdb, 0x30,
	0x14, 0x14, 0x2b, 0xa7, 0x4d, 0x9f, 0x95, 0xb6, 0x21, 0x3a, 0x08, 0x42, 0x21, 0xa8, 0xea, 0xa2,
	0x25, 0x64, 0xec, 0x8c, 0x19, 0x1a, 0x38, 0x59, 0x02, 0x34, 0x0b, 0xd1, 0xa9, 0x9b, 0x22, 0xb1,
	0x32, 0x11, 0x89, 0x54, 0x45, 0x45, 0x80, 0x87, 0xfe, 0x43, 0xbf, 0xa9, 0x53, 0xc7, 0x8c, 0x1d,
	0x0b, 0xfb, 0x47, 0x0a, 0x4a, 0x96, 0x2d, 0xdb, 0x4b, 0x36, 0xde, 0xbb, 0x7b, 0xf7, 0xee, 0x00,
	0xc2, 0x85, 0x90, 0x35, 0xaf, 0x64, 0x9c, 0xd3, 0xf2, 0x21, 0xa3, 0x65, 0xa5, 0x6a, 0x95, 0xa8,
	0x9c, 0xa6, 0x42, 0x97, 0x71, 0x9d, 0xcc, 0x35, 0xaf, 0x1a, 0x5e, 0x6d, 0x20, 0x69, 0x05, 0xde,
	0x65, 0x26, 0xea, 0xf9, 0xe3, 0x3d, 0x49, 0x54, 0x41, 0x73, 0x21, 0x1f, 0x16, 0x71, 0x4c, 0xbf,
	0xe7, 0x8b, 0x33, 0x51, 0x9c, 0xc5, 0xa5, 0xb8, 0x6a, 0x26, 0xe4, 0x9c, 0x4c, 0x3b, 0x33, 0x2a,
	0x0a, 0xda, 0x4c, 0x68, 0xa2, 0xa4, 0xec, 0x96, 0xc3, 0xdf, 0x08, 0xc6, 0x37, 0x6b, 0x3f, 0xc6,
	0x7f, 0x60, 0x0a, 0x8e, 0xe6, 0x32, 0xe5, 0xd5, 0x0d, 0x6f, 0x44, 0xc2, 0x5d, 0x14, 0xa0, 0xe8,
	0xcd, 0x74, 0x4c, 0x3a, 0xf8, 0x75, 0x51, 0x72, 0xb6, 0x23, 0xc0, 0x04, 0xc6, 0xc9, 0x3c, 0x96,
	0x92, 0xe7, 0x86, 0x74, 0x5f, 0xb4, 0x7a, 0x87, 0x5c, 0x6f, 0x67, 0x6c, 0x28, 0xc0, 0x1e, 0x1c,
	0x77, 0xfb, 0xb7, 0xa9, 0x6b, 0x07, 0x28, 0xb2, 0xd9, 0x06, 0xe3, 0x0f, 0xf0, 0x7a, 0x2d, 0xbd,
	0x4d, 0xdd, 0x51, 0x4b, 0x6e, 0x07, 0xd8, 0x85, 0x57, 0x05, 0xd7, 0x3a, 0xce, 0xb8, 0x7b, 0x14,
	0xa0, 0xc8, 0x61, 0x3d, 0x0c, 0x27, 0xe0, 0x6c, 0x3b, 0xe8, 0x12, 0x7f, 0x84, 0x51, 0xa2, 0xd2,
	0x3e, 0xfc, 0x09, 0x31, 0x43, 0x25, 0x35, 0xbf, 0x56, 0x29, 0x67, 0x2d, 0x15, 0x5e, 0xc1, 0xbb,
	0x99, 0xd1, 0x0f, 0xbb, 0x9b, 0x03, 0x3a, 0xd3, 0x5f, 0xb8, 0x74, 0x51, 0x60, 0x47, 0x36, 0xeb,
	0x21, 0xc6, 0x30, 0x32, 0xcf, 0xb6, 0x9d, 0xc3, 0xda, 0x77, 0xc8, 0xe0, 0x74, 0xcf, 0x41, 0x97,
	0xc6, 0xe2, 0x51, 0x9b, 0x2e, 0xba, 0xb7, 0x58, 0x43, 0xfc, 0x09, 0x8e, 0xcc, 0x61, 0xe3, 0x61,
	0x1f, 0x86, 0xea, 0xb8, 0xe9, 0x4f, 0x38, 0xee, 0xed, 0xf0, 0x39, 0xbc, 0xed, 0xdf, 0x77, 0x5d,
	0x4f, 0xec, 0x90, 0x41, 0x5c, 0xef, 0x84, 0x0c, 0x4f, 0x87, 0x16, 0xfe, 0x0c, 0xef, 0xfb, 0xc9,
	0x6c, 0xb8, 0x76, 0x4a, 0xf6, 0xab, 0x7a, 0x98, 0x1c, 0x64, 0x0f, 0xad, 0xd9, 0xdd, 0x9f, 0xa5,
	0x8f, 0x9e, 0x96, 0x3e, 0xfa, 0xb7, 0xf4, 0xd1, 0xaf, 0x95, 0x6f, 0x3d, 0xad, 0x7c, 0xeb, 0xef,
	0xca, 0xb7, 0xbe, 0x3d, 0xeb, 0x63, 0x5e, 0xee, 0xc2, 0xfb, 0x97, 0xad, 0xee, 0xe2, 0x7f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x03, 0x9c, 0xdb, 0xdc, 0xd6, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DispatchClient is the client API for Dispatch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DispatchClient interface {
	// 消息分发
	DispatchMessage(ctx context.Context, in *DispatchReq, opts ...grpc.CallOption) (*DispatchResp, error)
	// 批量分发消息,如果不需要有状态的服务可以调用这个接口
	DispatchBatchMessage(ctx context.Context, in *BatchDispatchReq, opts ...grpc.CallOption) (*BatchDispatchResp, error)
}

type dispatchClient struct {
	cc *grpc.ClientConn
}

func NewDispatchClient(cc *grpc.ClientConn) DispatchClient {
	return &dispatchClient{cc}
}

func (c *dispatchClient) DispatchMessage(ctx context.Context, in *DispatchReq, opts ...grpc.CallOption) (*DispatchResp, error) {
	out := new(DispatchResp)
	err := c.cc.Invoke(ctx, "/Dispatch/DispatchMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatchClient) DispatchBatchMessage(ctx context.Context, in *BatchDispatchReq, opts ...grpc.CallOption) (*BatchDispatchResp, error) {
	out := new(BatchDispatchResp)
	err := c.cc.Invoke(ctx, "/Dispatch/DispatchBatchMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatchServer is the server API for Dispatch service.
type DispatchServer interface {
	// 消息分发
	DispatchMessage(context.Context, *DispatchReq) (*DispatchResp, error)
	// 批量分发消息,如果不需要有状态的服务可以调用这个接口
	DispatchBatchMessage(context.Context, *BatchDispatchReq) (*BatchDispatchResp, error)
}

// UnimplementedDispatchServer can be embedded to have forward compatible implementations.
type UnimplementedDispatchServer struct {
}

func (*UnimplementedDispatchServer) DispatchMessage(ctx context.Context, req *DispatchReq) (*DispatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchMessage not implemented")
}
func (*UnimplementedDispatchServer) DispatchBatchMessage(ctx context.Context, req *BatchDispatchReq) (*BatchDispatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchBatchMessage not implemented")
}

func RegisterDispatchServer(s *grpc.Server, srv DispatchServer) {
	s.RegisterService(&_Dispatch_serviceDesc, srv)
}

func _Dispatch_DispatchMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatchServer).DispatchMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dispatch/DispatchMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatchServer).DispatchMessage(ctx, req.(*DispatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatch_DispatchBatchMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDispatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatchServer).DispatchBatchMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dispatch/DispatchBatchMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatchServer).DispatchBatchMessage(ctx, req.(*BatchDispatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dispatch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Dispatch",
	HandlerType: (*DispatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DispatchMessage",
			Handler:    _Dispatch_DispatchMessage_Handler,
		},
		{
			MethodName: "DispatchBatchMessage",
			Handler:    _Dispatch_DispatchBatchMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/pkg/protocol/dispatchserver/dispatch.proto",
}

func (m *DispatchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintDispatch(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ChannelId != 0 {
		i = encodeVarintDispatch(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x20
	}
	if m.SenderId != 0 {
		i = encodeVarintDispatch(dAtA, i, uint64(m.SenderId))
		i--
		dAtA[i] = 0x18
	}
	if m.ChannelType != 0 {
		i = encodeVarintDispatch(dAtA, i, uint64(m.ChannelType))
		i--
		dAtA[i] = 0x10
	}
	if m.SenderDevice != 0 {
		i = encodeVarintDispatch(dAtA, i, uint64(m.SenderDevice))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DispatchResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DispatchResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DispatchResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		i = encodeVarintDispatch(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BatchDispatchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchDispatchReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchDispatchReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		i -= len(m.Msgs)
		copy(dAtA[i:], m.Msgs)
		i = encodeVarintDispatch(dAtA, i, uint64(len(m.Msgs)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgsLen) > 0 {
		dAtA2 := make([]byte, len(m.MsgsLen)*10)
		var j1 int
		for _, num1 := range m.MsgsLen {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintDispatch(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchDispatchResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchDispatchResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchDispatchResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Codes) > 0 {
		dAtA4 := make([]byte, len(m.Codes)*10)
		var j3 int
		for _, num := range m.Codes {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintDispatch(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserIds) > 0 {
		dAtA6 := make([]byte, len(m.UserIds)*10)
		var j5 int
		for _, num1 := range m.UserIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintDispatch(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDispatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovDispatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DispatchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SenderDevice != 0 {
		n += 1 + sovDispatch(uint64(m.SenderDevice))
	}
	if m.ChannelType != 0 {
		n += 1 + sovDispatch(uint64(m.ChannelType))
	}
	if m.SenderId != 0 {
		n += 1 + sovDispatch(uint64(m.SenderId))
	}
	if m.ChannelId != 0 {
		n += 1 + sovDispatch(uint64(m.ChannelId))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovDispatch(uint64(l))
	}
	return n
}

func (m *DispatchResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovDispatch(uint64(m.Code))
	}
	return n
}

func (m *BatchDispatchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MsgsLen) > 0 {
		l = 0
		for _, e := range m.MsgsLen {
			l += sovDispatch(uint64(e))
		}
		n += 1 + sovDispatch(uint64(l)) + l
	}
	l = len(m.Msgs)
	if l > 0 {
		n += 1 + l + sovDispatch(uint64(l))
	}
	return n
}

func (m *BatchDispatchResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		l = 0
		for _, e := range m.UserIds {
			l += sovDispatch(uint64(e))
		}
		n += 1 + sovDispatch(uint64(l)) + l
	}
	if len(m.Codes) > 0 {
		l = 0
		for _, e := range m.Codes {
			l += sovDispatch(uint64(e))
		}
		n += 1 + sovDispatch(uint64(l)) + l
	}
	return n
}

func sovDispatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDispatch(x uint64) (n int) {
	return sovDispatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

// Deserialize a specified number of fields, return early as soon as the specified fields are deserialized.
// 反序列化指定数量的字段,达到指定的次数就返回. 参数 targetFileNum <=0 直接返回,不进行反序列化
func (m *DispatchReq) UnmarshalWithFieldNum(dAtA []byte, targetFileNum int) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		if targetFileNum <= 0 {
			return nil
		}
		switch fieldNum {
		case 1:
			targetFileNum--
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderDevice", wireType)
			}
			m.SenderDevice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderDevice |= v1.DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			targetFileNum--
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelType", wireType)
			}
			m.ChannelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelType |= v1.ChannelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			targetFileNum--
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			targetFileNum--
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			targetFileNum--
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDispatch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDispatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDispatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

// Deserialize a specified number of fields, return early as soon as the specified fields are deserialized.
// 反序列化指定数量的字段,达到指定的次数就返回. 参数 targetFileNum <=0 直接返回,不进行反序列化
func (m *DispatchResp) UnmarshalWithFieldNum(dAtA []byte, targetFileNum int) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatchResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatchResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		if targetFileNum <= 0 {
			return nil
		}
		switch fieldNum {
		case 1:
			targetFileNum--
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= v1.ResponseCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDispatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

// Deserialize a specified number of fields, return early as soon as the specified fields are deserialized.
// 反序列化指定数量的字段,达到指定的次数就返回. 参数 targetFileNum <=0 直接返回,不进行反序列化
func (m *BatchDispatchReq) UnmarshalWithFieldNum(dAtA []byte, targetFileNum int) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchDispatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchDispatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		if targetFileNum <= 0 {
			return nil
		}
		switch fieldNum {
		case 1:
			targetFileNum--
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgsLen = append(m.MsgsLen, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDispatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDispatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.MsgsLen = m.MsgsLen[0:0]
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDispatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgsLen = append(m.MsgsLen, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgsLen", wireType)
			}
		case 2:
			targetFileNum--
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDispatch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDispatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs[:0], dAtA[iNdEx:postIndex]...)
			if m.Msgs == nil {
				m.Msgs = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDispatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

// Deserialize a specified number of fields, return early as soon as the specified fields are deserialized.
// 反序列化指定数量的字段,达到指定的次数就返回. 参数 targetFileNum <=0 直接返回,不进行反序列化
func (m *BatchDispatchResp) UnmarshalWithFieldNum(dAtA []byte, targetFileNum int) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchDispatchResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchDispatchResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		if targetFileNum <= 0 {
			return nil
		}
		switch fieldNum {
		case 1:
			targetFileNum--
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDispatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDispatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.UserIds = m.UserIds[0:0]
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDispatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 2:
			targetFileNum--
			if wireType == 0 {
				var v v1.ResponseCode
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= v1.ResponseCode(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Codes = append(m.Codes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDispatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDispatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				m.Codes = m.Codes[0:0]
				for iNdEx < postIndex {
					var v v1.ResponseCode
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDispatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= v1.ResponseCode(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Codes = append(m.Codes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Codes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDispatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

// Cleanup Clean up the fields of the message.
// 清理消息的字段，该方法在消息被释放时被调用，不对切片中的字段进行处理。
func (m *DispatchReq) Cleanup() {
	if m == nil {
		return
	}
	m.SenderDevice = 0
	m.ChannelType = 0
	m.SenderId = 0
	m.ChannelId = 0
	if m.Message != nil {
		m.Message = m.Message[:0]
	}
}

// Cleanup Clean up the fields of the message.
// 清理消息的字段，该方法在消息被释放时被调用，不对切片中的字段进行处理。
func (m *DispatchResp) Cleanup() {
	if m == nil {
		return
	}
	m.Code = 0
}

// Cleanup Clean up the fields of the message.
// 清理消息的字段，该方法在消息被释放时被调用，不对切片中的字段进行处理。
func (m *BatchDispatchReq) Cleanup() {
	if m == nil {
		return
	}
	if m.MsgsLen != nil {
		m.MsgsLen = m.MsgsLen[:0]
	}
	if m.Msgs != nil {
		m.Msgs = m.Msgs[:0]
	}
}

// Cleanup Clean up the fields of the message.
// 清理消息的字段，该方法在消息被释放时被调用，不对切片中的字段进行处理。
func (m *BatchDispatchResp) Cleanup() {
	if m == nil {
		return
	}
	if m.UserIds != nil {
		m.UserIds = m.UserIds[:0]
	}
	if m.Codes != nil {
		m.Codes = m.Codes[:0]
	}
}

// DeepCleanup Clean up the fields of the message.
// 清理消息的字段，该方法在消息被释放时被调用，递归处理切片中的字段。
func (m *DispatchReq) DeepCleanup() {
	if m == nil {
		return
	}
	m.SenderDevice = 0
	m.ChannelType = 0
	m.SenderId = 0
	m.ChannelId = 0
	if m.Message != nil {
		m.Message = m.Message[:0]
	}
}

// DeepCleanup Clean up the fields of the message.
// 清理消息的字段，该方法在消息被释放时被调用，递归处理切片中的字段。
func (m *DispatchResp) DeepCleanup() {
	if m == nil {
		return
	}
	m.Code = 0
}

// DeepCleanup Clean up the fields of the message.
// 清理消息的字段，该方法在消息被释放时被调用，递归处理切片中的字段。
func (m *BatchDispatchReq) DeepCleanup() {
	if m == nil {
		return
	}
	if m.MsgsLen != nil {
		m.MsgsLen = m.MsgsLen[:0]
	}
	if m.Msgs != nil {
		m.Msgs = m.Msgs[:0]
	}
}

// DeepCleanup Clean up the fields of the message.
// 清理消息的字段，该方法在消息被释放时被调用，递归处理切片中的字段。
func (m *BatchDispatchResp) DeepCleanup() {
	if m == nil {
		return
	}
	if m.UserIds != nil {
		m.UserIds = m.UserIds[:0]
	}
	if m.Codes != nil {
		m.Codes = m.Codes[:0]
	}
}
func (m *DispatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderDevice", wireType)
			}
			m.SenderDevice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderDevice |= v1.DeviceType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelType", wireType)
			}
			m.ChannelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelType |= v1.ChannelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDispatch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDispatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDispatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DispatchResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DispatchResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DispatchResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= v1.ResponseCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDispatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchDispatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchDispatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchDispatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgsLen = append(m.MsgsLen, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDispatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDispatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MsgsLen) == 0 {
					m.MsgsLen = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDispatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgsLen = append(m.MsgsLen, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgsLen", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDispatch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDispatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs[:0], dAtA[iNdEx:postIndex]...)
			if m.Msgs == nil {
				m.Msgs = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDispatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchDispatchResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchDispatchResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchDispatchResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserIds = append(m.UserIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDispatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDispatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserIds) == 0 {
					m.UserIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDispatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserIds = append(m.UserIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
		case 2:
			if wireType == 0 {
				var v v1.ResponseCode
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= v1.ResponseCode(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Codes = append(m.Codes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDispatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDispatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Codes) == 0 {
					m.Codes = make([]v1.ResponseCode, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v v1.ResponseCode
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDispatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= v1.ResponseCode(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Codes = append(m.Codes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Codes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDispatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDispatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDispatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDispatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDispatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDispatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDispatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDispatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDispatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDispatch = fmt.Errorf("proto: unexpected end of group")
)
